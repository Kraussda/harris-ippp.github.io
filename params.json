{
  "name": "Introduction to Programming for Public Policy / Harris 30550",
  "tagline": "Class Syllabus ",
  "body": "* Contact: James Saxon (jsaxon@uchicago.edu)\r\n* Discussion Board: [Piazza](https://piazza.com/uchicago/fall2016/ppha30550) – please use!\r\n* Meeting Day/Time: Section 1, MW 9-10:20am; Section 2: MW 1:30-2:50\r\n* Office Hours: Friday afternoon, TBD.\r\n\r\n# Course Aims\r\nThe past five to ten years have witnessed an explosion in both the collection of ‘big data,’ and the sophistication and accessibility of the tools required to analyze that data. This has spurred government agencies and policy analysts to develop novel, data-driven approaches to policy creation and evaluation.\r\n\r\nThis is an introductory course in programming and data analysis for public policy students with no prior coding experience. It is for anyone who wants to gather, explore, and share quantitative data – or work with others who do. The course has three goals:\r\n\r\n1. Early on, students will learn to think algorithmically using self-contained problems in python.\r\n2. We will then cover tools and recipes for retrieving, cleaning, visualizing, and analyzing data. This will include:\r\n     * The command line. It is the ‘standard’ interface to computers for programmers. We’ll cover how to navigate it and use its many tools.\r\n     * Coding in python: fundamentals of the language including types, control, functions and classes, input/output, complexity theory, debugging. Students will learn to turn a question into a python program.\r\n     * Fundamentals of data science libraries (toolkits) including pandas and geopandas, plotting with matplotlib and seaborn, and basic analysis with scikit-learn.\r\n     * Basics of relational databases – one of the most powerful ways of storing, accumulating, combining, and accessing data.\r\n     * Basic web development: simple websites and an introduction to dynamic sites.\r\n     * Creating datasets and accessing available data: scraping web data and using APIs.\r\n     * Geographic Information Systems (GIS): representing your data in beautiful maps.\r\n     * Large projects depend on many people working together on the same code. Version control (now git) makes this possible. Students will use it to submit all work, and to collaborate on several assignments.\r\n3. Ultimately, students should be comfortable applying skills for research at Harris and beyond, and confident independently exploring new packages for further projects. They should know enough to work with and direct engineers for the projects that they need, and they should understand the potential of such work.\r\n\r\nThroughout we’ll emphasize good practices for collaborative code development and strive to de- mystify computers, the internet, and open source software. Particularly after the first weeks, we’ll highlight how these skills apply to evaluating and improving policy.\r\n\r\n\r\n\r\n\r\n# Books and Resources\r\nOnline documentation ('docs') will provide the principal written resources for the class; sources are listed for each week.\r\nFor many code projects/'packages' and languages, these sources are literally _the_ standards that define how to use the products -- and unlike books will keep up with the packages as they evolve.\r\nLocating these sources and using them to identify the methods or recipes you need is an important skill in coding.\r\n\r\nThis said, several of the O'Reilly books are very good and also happen to be available electronically through the UC library:\r\n  [Think Python](https://catalog.lib.uchicago.edu/vufind/Record/9969856) (Allen Downey),\r\n  [Python for data analysis](https://catalog.lib.uchicago.edu/vufind/Record/9969841) (Wes McKinney), and the\r\n  [SQL cookbook](https://catalog.lib.uchicago.edu/vufind/Record/10176227) (Anthony Molinaro).\r\nSeeing the material multiple times will help -- so please use these resources!!\r\n\r\n# Assignments and Grading \r\n## Weekly assignments (70%)\r\nAssignments will be posted on the class GitHub site at least one week before they are due.\r\nI will de-weight the lowest grade by one half.\r\nThe first week's assignment will be graded only for completeness.\r\nEach subsequent assignment will be assessed on: \r\n* Correctness (60%): does it give the 'right' answer and behave 'correctly' (no crashing or hanging)?\r\n* Style (30%): is the code commented and organized in a reasonable way?  Is the output visually appealing and clear?  Do all plot axes have meaningful, readable labels with units?\r\n* Performance (10%): does it execute in a reasonable amount of time?\r\nSince the parts of an assignment may be cumulative, it is _strongly_ advised to review and start the assignments early, so you can get help through Piazza or at office hours if you get stuck.  Assignments will be collected through GitHub, so get a student account [here](https://education.github.com/pack).\r\n\r\nAn automatic script will collect work at 1:30am, Wednesday morning.\r\nSince we may review challenging parts of the homeworks in class on Wednesday, \r\n  late work will be penalized 20%; notify the instructor to 'pull' it when it is complete.  \r\n\r\n## Final Projects (30%) \r\nWorking in groups of two or three, students will create a small web application to interactively present data that they have gathered.\r\nStudents will choose a subject and propose the functionality to me by November 9.\r\nThat proposal should identify data sources, specify a 'baseline' functionality, and describe several extensions.\r\n(You can consider, for instance [this proposal](http://cfss.uchicago.edu/ACS_final.html) from an earlier version of this class.)\r\n\r\n### Due Date\r\n\r\nEach group will make a five minute presentation of their work (+ 2 minutes for questions) -- the question they sought to ask, the data, the structure of their code and challenges, and basic functionality of their site -- on **November 30**.  Of course, you're welcome to form groups between the two sections, but I do want all group members to participate in the presentation.\r\n\r\nBy midnight **December 2nd**, all code must be definitively checked in, with a README for launching and using the site, mirroring the class presentation (questions, data sources, code structure, site layout).\r\n\r\n### The baseline\r\n* Your app must include data from at least two sources, which you will specify to me by Wednesday November 9.  I am much more interested in projects that start from some sort of a \"question\" and that take the merge seriously.  It is not enough to plot dots representing one type of incident on a chloropleth map from another source.\r\n  * Scour the web for city, state, federal, and foreign data portals, BLS, Census, Twitter, or any NGOs that you know.  I'd love to learn about new datasets! \r\n* You _may_ merge the data once and save it as CSV file (`df.to_csv()`).  Alternatively, if it is feasible and fast, you can use only the existing sources (no cached data).  \r\n* Write at least one function that use the data to make plots or maps.  Varying the inputs (for instance, the variable or the sample) should give me diverse outputs.\r\n* Integrate that function into a lightweight web application, in Django.  I should be able to navigate around and see a set of nice-looking plots through matplotlib or seaborn.\r\n* The website should look nice.\r\n\r\n### Suggested extensions\r\n* I would like you to build a sqlite database from the two sources, and load your data from SQL in your functions.\r\n* The more I can vary your input, the better.  The more meaningful your plots, the better.\r\n* If you want to do some real statistics or analysis, I'd love to see it.\r\n* Depending on what data you use (if this is meaningful), apply a machine-learning method from sci-kit learn, to predict an outcome from inputs.\r\n\r\n### Grading\r\nThe grading rubric will be modified to benefit ambitious projects:\r\n* Scope (30%): how many of the extensions did the group complete?  How much does the application do?\r\n* Correctness (30%): is the baseline functionality fully delivered, bug-free?\r\n* Style (25%): are the front-end and code both manageable?\r\n* Performance (15%): is the site 'snappy?'\r\n\r\n# Where to Work / How to Compute\r\n\r\nPart of the overhead to doing computation is getting the software running.\r\nStudents are therefore encouraged to install the software required for the class on their personal laptops.\r\nThis will enable them to straightforwardly continue using the skills that they develop, when the quarter is over.\r\n\r\nPython will be the primary language of instruction for the course.\r\nThere are many ways of installing and running it, but I suggest\r\n  [Anaconda](https://www.continuum.io/downloads).\r\nA small program may be scaffolded up on many others, \r\n  and depend on their being in the correct place with the correct versions in order to function.\r\n(These are called _dependencies_.)\r\nFor moderately recent computers, Anaconda handles all of this.\r\nAnaconda installs to a single folder, so you can easily remove it at the end of the course, if so desired.\r\n\r\nIf you have any concerns about this, talk to me.\r\nIf we end up having any trouble with Anaconda, \r\n   I'll provide an Ubuntu Linux distribution through Docker.\r\n\r\n**Bring your laptop to every class** -- short demos will be an important part of the lectures.\r\n\r\n# Schedule\r\n\r\n## Week 1: Welcome to the Course -- and to the Command line!\r\n\r\n### Welcome to the Course.  Command line and version control.  \r\nCase studies of effective use of data in transforming public policy decisions.\r\nWelcome to the command line and to version control.\r\n\r\n### First Steps with Python: Data Types and Operations\r\nA first shell script.\r\nSyntax and semantics of the language; comments.\r\nIntroduction of the standard data types and operations.\r\n\r\n* **Slides**: [Command line](https://github.com/harris-ippp/lectures/blob/master/01/01a_welcome.pdf), [Git](https://github.com/harris-ippp/lectures/blob/master/01/01b_git.pdf), [Python starter/scripts](https://github.com/harris-ippp/lectures/blob/master/01/01b_python.pdf), [Simple Program Notebook](https://github.com/harris-ippp/lectures/blob/master/01/Simple%20Program.ipynb), [Variables and Types Notebook](https://github.com/harris-ippp/lectures/blob/master/01/Variables%20and%20Types.ipynb).\r\n* **Readings**: \r\n   * Data and Technology in Government: [Innovative State](https://smile.amazon.com/Innovative-State-Aneesh-Chopra/dp/0802121349/) (Aneesh Chopra), and [The Responsive City](https://smile.amazon.com/Responsive-City-Communities-Data-Smart-Governance-ebook/dp/B00MQTIA3M/) (Stephen Goldsmith and Susan Crawford).\r\n   * Python: [Think Python](http://proquestcombo.safaribooksonline.com.proxy.uchicago.edu/book/programming/python/9781449332006) (Downey), Chapters 1, 2, 10, and 11.  For an alternative take, consult chapters 1-5 of the official [Python Tutorial](https://docs.python.org/3/tutorial/index.html).\r\n   * Git: [Hello World](https://guides.github.com/activities/hello-world/), GitHub Guides.\r\n* **[Assignment](https://classroom.github.com/assignment-invitations/8cfa1521ab98e0dfb7341771721f793b)**:  Command line fu: crime and salary data from Chicago.  Create a [student GitHub account](https://education.github.com/pack), and upload the first week's work.\r\n\r\n## Week 2: Python functions, classes, and style.\r\n\r\n### Python Introduction Continued: Control Statements and iterating\r\n\r\n### Functions, classes, and modules.\r\n\r\n* **Slides**: [Control Statements](https://github.com/harris-ippp/lectures/blob/master/02/Control.ipynb), [Functions, Classes and Modules](https://github.com/harris-ippp/lectures/blob/master/02/Functions%2C%20Classes%2C%20and%20Modules.ipynb).\r\n* **Readings**: \r\n   * Vim: [A vim Tutorial and Primer](https://danielmiessler.com/study/vim/), Daniel Miessler.  % \\note{haven't found a great reference}.\r\n   * Shell: [Learning the Shell](http://linuxcommand.org/learning\\_the\\_shell.php), William E. Shotts, Jr, parts 2, 3, 5, and 6.\r\n   * Python: [Think Python](http://proquestcombo.safaribooksonline.com.proxy.uchicago.edu/book/programming/python/9781449332006) chapters 3 and 5-8.\r\n* **[Assignments](https://github.com/harris-ippp/02-algorithmic-thinking/blob/master/README.md)**: Simple algorithmic problem solving for several [Project Euler](https://projecteuler.net/) type problems.  Drawing with turtles. \r\n\r\n## Week 3: Debugging, Optimizing, and Reusing.\r\n\r\n### Input/Output and data formats.  Options.  Exceptions.\r\nReading from and writing to files.  CSV, JSON, pickle.\r\nReusable code.  \r\nPrograms and arguments.  \r\n\r\n### Debugging and profiling.  Algorithmic complexity and optimization. \r\nUsing `pdb` and `time`.\r\nBig O notation.\r\nRecursive algorithms.\r\nPrecomputation.\r\nAsking questions.\r\n\r\n* **Slides**: [List comprehension](https://github.com/harris-ippp/lectures/blob/master/03/list_comprehension.pdf), [file formats](https://github.com/harris-ippp/lectures/blob/master/03/files.pdf), [debugging](https://github.com/harris-ippp/lectures/blob/master/03/debugging.pdf), and [complexity](https://github.com/harris-ippp/lectures/blob/master/03/complexity.pdf).\r\n* **Readings**: Official documentation for [input and output](https://docs.python.org/3/tutorial/inputoutput.html), [argparse](https://docs.python.org/3/library/argparse.html) and [pdb](https://docs.python.org/3/library/pdb.html).  [Think Python](http://proquestcombo.safaribooksonline.com.proxy.uchicago.edu/book/programming/python/9781449332006) Chapter 20 on debugging and 21 on complexity.\r\n   * Coding can be tough, and everyone needs to ask for help sometimes.  Eric Steven Raymond wrote an important (though somewhat snarky) piece on [How To Ask Questions The Smart Way](http://www.catb.org/esr/faqs/smart-questions.html#intro), to get people to respond with the answer you need.  Thinking carefully about your question will often bring you to the answer!\r\n* **[Assignments](https://github.com/harris-ippp/03-sudoku/blob/master/README.md)**:  Solve Sudoku.  Students will work in groups of up to three to solve Sudoku.  (Assignment description)[https://github.com/harris-ippp/03-sudoku/blob/master/README.md] and (repositories)[https://classroom.github.com/assignment-invitations/acb6c296950cc73142b3ba923b8a35fc].\r\n\r\n## Week 4: Data Visualization with Python: matplotlib and pandas\r\n\r\n### Pandas.\r\nData imports, slicing, merging, and exploration.\r\n\r\n### Plotting and data analysis.\r\nThe matplotlib, seaborn, and statsmodels libraries\r\n\r\n* **Slides**: [Introduction to Pandas](https://github.com/harris-ippp/lectures/blob/master/04/Introduction%20to%20Pandas.ipynb), [Worked Examples](https://github.com/harris-ippp/lectures/blob/master/04/Examples%2C%20and%20Some%20More%20Features.ipynb).\r\n* **Readings**\r\n   * _matplotlib_: [Beginner's Guide](http://matplotlib.org/users/beginner.html) and [Plotting and Visualization](http://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch04-code-listing.ipynb), Robert Johansson.\r\n   * _pandas_: Reference for the [Official Documentation](http://pandas.pydata.org/pandas-docs/stable/index.html), with [tutorials](http://pandas.pydata.org/pandas-docs/stable/tutorials.html).  I think [Greg Reda's](http://www.gregreda.com/2013/10/26/intro-to-pandas-data-structures/) is easier to understand for new users.  Once you've read that, Tom Augspurger's [Modern Pandas](https://tomaugspurger.github.io/modern-1.html) (with Jupyter notebooks) gives a bit more detail.\r\n   * _matplotlib_: [Beginner's Guide](http://matplotlib.org/users/beginner.html) and [Plotting and Visualization](http://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch04-code-listing.ipynb), Robert Johansson.\r\n   * _seaborn_: [tutorial](https://stanford.edu/~mwaskom/software/seaborn/tutorial/distributions.html).\r\n* **[Assignments](https://github.com/harris-ippp/04-pandas/blob/master/README.md)**: Pandas and python.  Problem statement [here](https://github.com/harris-ippp/04-pandas/blob/master/README.md).\r\n\r\n## Week 5: Relational Databases\r\n\r\n### Relational Databases\r\nWhat is Structured Query Language (SQL)?  Motivations, use cases.\r\nData types.  Creating, selecting, updating, dropping, and joining in SQLite.\r\nDatabase design: primary keys, triggers, and uniqueness and redundancy.\r\nPrecomputation revisited.\r\n\r\n### Creating and Querying a Simple Database\r\nImporting data.  Aggregation with group; ordering and limiting.  Python interface: `sqlite3`.\r\n\r\n* **Slides**: [SQL](https://github.com/harris-ippp/lectures/blob/master/05/sql.pdf), see also the [examples](https://github.com/harris-ippp/lectures/tree/master/05/ex) directory.\r\n* **Readings**: [SQL Cookbook](https://catalog.lib.uchicago.edu/vufind/Record/10176227) Chapters 1-3 and [SQLite Tutorial](http://www.sqlitetutorial.net/).  The [psycopg2 basic model usage](http://initd.org/psycopg/docs/usage.html) and [sqlalchemy](http://docs.sqlalchemy.org/en/latest/orm/tutorial.html) tutorial.\r\n* **[Assignments](https://github.com/harris-ippp/05-sql/blob/master/README.md)**: query data on the American Time Use Survey.  Create a salaries database.  Plot through pandas.\r\n\r\n## Week 6: Static Websites and Web Scraping\r\n\r\n### The interwebs: pipes and tubes.\r\nThe Internet and the world wide web.\r\nServers and the cloud; Apache, nginx, etc.\r\nThe HTTP protocol (there are others)!\r\nCascading style sheets.\r\n\r\n### RESTful APIs, Scraping.\r\n\r\n* **Slides**: [The Internet, the Web, and HTML](https://github.com/harris-ippp/lectures/blob/master/06/web_html.pdf), [APIs and Scraping](https://github.com/harris-ippp/lectures/blob/master/06/resources.pdf).\r\n* **Readings**:\r\n   * [The Internet, explained](http://www.vox.com/cards/the-internet) and [40 maps that explain the internet](http://www.vox.com/a/internet-maps), by Timothy B. Lee at Vox (not Tim Berners-Lee, the inventor of the web!).\r\n   * See the w3schools references for [html](http://www.w3schools.com/html/default.asp), [css](http://www.w3schools.com/css/default.asp}{CSS}, and [bootstrap](http://www.w3schools.com/bootstrap/).\r\n   * [Beautiful Soup](http://www.crummy.com/software/BeautifulSoup/bs4/doc/).\r\n* **[Assignments](https://github.com/harris-ippp/06-web/blob/master/README.md)**: Create a simple but professional personal website with at least three sections, and post it to [home.uchicago.edu](http://home.uchicago.edu) (or wherever).  Assemble data from the Virginia elections site.\r\n\r\n## Week 7: Dynamic Websites\r\n\r\n### Dynamic websites and Django\r\nDynamic versus static sites: python WSGI, php, cgi, and javascript.\r\nSetting up the test server, and getting your files from week 7 in place.\r\nSimple templates and responses.\r\n\r\n### Django: Responding to Queries\r\nModels.  \r\nGet and post revisited.\r\nIncorporating other python modules, and displaying plots.\r\n\r\n* **Readings**: The [Django Tutorial](https://docs.djangoproject.com/en/1.9/intro/) and [Using Web Frameworks for Scientific Applications](http://hplgit.github.io/web4sciapps/doc/pub/web4sa_plain_all.html#wf:vib:django), Hans Petter Langtangen.\r\n* **Assignments**: Create a django application to (a) load your website from last week, (b) perform a simple calculation, and (c) present a configurable scatter plot using the SQLite database created in week 5.\r\n\r\n## Week 8: Geographic Information Systems\r\n\r\n### Introduction to GIS\r\nShapefiles and data -- what's available?\r\nWorking with the QGIS GUI: importing, merging, filtering, and clipping vector layers.\r\nProjections and coordinate reference systems.\r\nPostgres and merging.\r\n\r\n### GeoPandas, shapely, and folium: scripting and interactive plotting.\r\n\r\n* **Readings**: \r\n   * QGIS: [QGIS Basics For Journalists](https://multimedia.journalism.berkeley.edu/tutorials/qgis-basics-journalists/), Len De Groot; and the [QGIS Tutorial](http://www.qgistutorials.com/en/index.html).\r\n   * Python GIS: [GeoPandas](http://geopandas.org/) and the [shapely](http://toblerity.org/shapely/manual.html) users manual.\r\n* **Assignment**: make an attractive map for one field profiled by tract for the entire US.  Make a PDF.  Detailed tutorial provided.\r\n\r\n## Week 9: Maximizing the Power of Your Data: Multivariate Discrimination\r\n\r\n### Theory and context.\r\nUnderstanding errors versus optimizing results, and their interplay.\r\nMultilayer perceptrons, decision trees, and likelihoods.\r\nOvertraining.\r\nDeep and shallow learning.\r\n### Implementation.\r\nCreating and understanding a (very) simple multilayer perceptron\r\n\r\n* **Readings**: [Neural Networks for Pattern Recognition](https://www.amazon.com/Networks-Pattern-Recognition-Advanced-Econometrics/dp/0198538642), Christopher Bishop (fine, this is a book); Statistical Data Analysis, Glen Cowan.  [Supervised Machine Learning: A Review of Classification Techniques](http://www.informatica.si/index.php/informatica/article/download/148/140), S. B. Kotsiantis.\r\n* **Assignment**: None -- time for final project!\r\n\r\n## Week 10 and Finals: Project presentations (to be finalized).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}